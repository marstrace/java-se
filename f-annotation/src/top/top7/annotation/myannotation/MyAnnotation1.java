package top.top7.annotation.myannotation;

/******
 *       Created by LEARNING on 2021/1/11 1:50.
 *
 **********************************************************************
 *                .-~~~~~~~~~-._       _.-~~~~~~~~~-.
 *            __.'              ~.   .~              `.__
 *          .'//                  \./                  \\`.
 *        .'//                     |                     \\`.
 *      .'// .-~"""""""~~~~-._     |     _,-~~~~"""""""~-. \\`.
 *    .'//.-"                 `-.  |  .-'                 "-.\\`.
 *  .'//______.============-..   \ | /   ..-============.______\\`.
 *.'______________________________\|/______________________________`.
 *
 *
 *                     Don't forget to be awesome!                      
 **********************************************************************
 */

/**
 * @author LEARNING
 *         自定义注解类型：注解类型名遵循Java类的命名规则
 *
 *         注解中属性可以是以下类型:
 *         byte short int long float double boolean char String Class 枚举类型
 *         及以上11种类型的数组形式
 *         当属性为数组时 使用大括号进行赋值: @MyAnnotation(数组类型属性名={数组元素1,数组元素2....})
 *         当数组只有一个元素时,可以省略大括号@MyAnnotation(数组类型属性名=唯一的一个数组元素)
 */
public @interface MyAnnotation1 {

    /*
     * 一般来说我们可以在注解内部定义属性,定义方式如下
     * 表示当前注解MyAnnotation1的name属性及age属性
     * 如果一个注解中有属性,在使用该注解时必须给属性赋值,赋值方式如下:若存在多个属性,在赋值时使用逗号隔开
     * @MyAnnotation1(name="张三",age=23)
     */
    // String name();

    /**
     * 在定义属性时可以给定默认值,方式如下所示
     * 当一个属性存在默认值,在使用该注解时可以不用显式赋值,不赋值则会默认使用默认值
     */
    int age() default 25;

    /**
     * 当注解属性名为value,且只有这一个属性需要显式赋值,在使用注解给value属性赋值时可以省略"value=",简写
     * 为@注解名(属性值),只有当属性名为value时才可以简写,其余不可以
     *
     * @MyAnnotation1(value="value的值",name="张三",age=26)
     * @MyAnnotation1("value的值")//只需要给value属性赋值时可以省略"value="
     */
    int value();
}
