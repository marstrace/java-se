package top.top7.oop;

/******
 *       Created by LEARNING on 2021/2/25 1:16.
 *
 **********************************************************************
 *                .-~~~~~~~~~-._       _.-~~~~~~~~~-.
 *            __.'              ~.   .~              `.__
 *          .'//                  \./                  \\`.
 *        .'//                     |                     \\`.
 *      .'// .-~"""""""~~~~-._     |     _,-~~~~"""""""~-. \\`.
 *    .'//.-"                 `-.  |  .-'                 "-.\\`.
 *  .'//______.============-..   \ | /   ..-============.______\\`.
 *.'______________________________\|/______________________________`.
 *
 *
 *                     Don't forget to be awesome!                      
 **********************************************************************
 */

/**
 * 静态代码块 与 实例代码块 与 构造方法
 * 父子类之间三者的执行顺序:
 * 1.父类静态块
 * 2.子类静态块
 * 3.父类实例块
 * 4.父类构造器
 * 5.子类实例块
 * 6.子类构造器
 *
 * 静态变量:
 * 1.静态变量在类加载时初始化
 * 2.静态变量存储在方法区中
 *
 * 静态代码块与静态变量:
 * 1.类加载时会按代码编写的顺序依次执行,因此,若需在静态代码块中使用静态变量,该静态变量的声明位置必须在该静态代码块之前
 *
 * 实例代码块与 实例变量:
 * 1.若需在实例代码块中使用实例变量,该实例变量的声明位置必须在该实例代码块之前
 */
public class Keyword2_static extends Father {

    static int a;

    /**
     * 静态代码块:
     * 1.在类加载时执行
     * 2.只执行一次
     */
    static {
        System.out.println("子类静态代码块");
        System.out.println(a);
//        System.out.println(b);不能在静态代码块中使用在当前静态代码块之后声明的静态变量
        }

    static int b;
    int c;
    /**
     * 实例代码块:
     * 1.在实例创建时执行
     * 2.每创建一个实例就会执行一次
     */
    {
        System.out.println("子类实例代码块");
        System.out.println(b);
        System.out.println(c);
//        System.out.println(d);不能在实例代码块中使用在当前实例代码块之后声明的实例变量
    }

    int d;

    /**
     * 构造方法:
     * 1.使用new关键字调用时执行
     * 2.调用一次执行一次
     */
    public Keyword2_static() {
        System.out.println("子类构造方法");
    }

    public static void main(String[] args) {
        Keyword2_static poop2 = new Keyword2_static();
    }
}

class Father {
    static {
        System.out.println("父类静态代码块");
    }

    {
        System.out.println("父类实例代码块");
    }

    public Father() {
        System.out.println("父类构造器");
    }
}
